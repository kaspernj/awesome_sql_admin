#!/usr/bin/env ruby

#!/usr/bin/php53gtk
<?
  define("_VERSION", 0.46); //version used to compare database.

  chdir(dirname(__FILE__)); //change dir.

  //definitions to make it work no matter which version of PHP-GTK the user are using.
  define("_TYPE_STRING", 64);
  define("_TYPE_LONG", 32);
  define("_TYPE_DOUBLE", 60);

  require_once("knjphpframework/functions_knj_extensions.php");
  knj_dl("gtk2");

  if (!class_exists("gladexml")){
    die("Your PHP-GTK2 installation was not compiled with support for Glade.\nDid you have \"libglade2-dev\" installed while you compiled?\n");
  }


  echo("Loading required files.\n");
  require_once("knjphpframework/functions_treeview.php");
  require_once("knjphpframework/functions_knj_msgbox.php");
  require_once("knjphpframework/functions_knj_objects.php");
  require_once("knjphpframework/functions_knj_readline.php");
  require_once("knjphpframework/class_knj_popup.php");
  require_once("knjphpframework/win_status.php");
  require_once("knjphpframework/functions_knj_gtk2.php");
  require_once("gui/win_main.php");
  require_once("functions/functions.php");


  //Set standard variables.

  //Read vars.
  $language = "auto";
  for($i = 1; $i < $_SERVER["argc"]; $i++){
    $value = $_SERVER["argv"][$i];

    if ($value == "--language"){
      $language = $_SERVER["argv"][++$i];
    elsif($value == "--profile"){
      $profiles[] = $_SERVER["argv"][++$i];
    elsif($value == "--help"){
      echo
        "\n" .
        "./knjsqladmin.php [options]\n" .
        "    --language [language]     - Sets the language to [language].\n" .
        "    --help                    - Shows this help-message.\n" .
        "    --profile [profile-name]  - Opens a profile by the specified name.\n" .
        "    [sqlite-file]             - Opens the specified SQLite2 or SQLite3 file.\n" .
        "\n\n"
      ;

      echo "Languages supported:\n";
      $fp = opendir("locales/");
      while(($file = readdir($fp)) !== false){
        if ($file != "." && $file != ".." && $file != ".svn" && $file != "CVS" && is_dir("locales/" . $file)){
          echo "    " . $file . "\n";
        }
      }

      echo "\n";
      exit();
    elsif(substr($_SERVER["argv"][$i], -7) == ".sqlite" || substr($_SERVER["argv"][$i], -8) == ".sqlite3"){
      require_once("knjphpframework/functions_knj_filesystem.php");
      $info = knj_fs::fileInfo($_SERVER["argv"][$i]);
      if (strpos($info, "SQLite 3") !== false){
        $type = "pdo";
        $dbtype = "sqlite3";
      elsif(strpos($info, "SQLite 2") !== false){
        $type = "sqlite2";
        $dbtype = "";
      }else{
        die("Could not detect the files database-type (" . $info . ").\n");
      }

      require_once("knjphpframework/knjdb/class_knjdb.php");
      $dbconn = new knjdb();
      $dbconn->setOpts(array(
          "type" => $type,
          "dbtype" => $dbtype,
          "path" => $_SERVER["argv"][$i]
        )
      );
      $dbconn->connect();
      $dbconns[] = array(
        "dbconn" => $dbconn,
        "title" => basename($_SERVER["argv"][$i])
      );
    }else{
      die("Cant understand the argument: \"" . $value . "\"\n");
    }
  }

  echo("Loading database.\n"); //Open a connecting to the database, where knjSQLAdmin's data is stored (SQLite3).
  require_once("knjphpframework/knjdb/class_knjdb.php");
  $homedir = knj_os::getHomeDir();
  $config_dir = $homedir . "/.knj";
  $config_file = $homedir . "/.knj/knjsqladmin.sqlite3";

  if (!file_exists($config_dir)){
    if (!mkdir($config_dir)){
      die("Could not create config-dir in the home-dir.\n");
    }
  }

  if (!file_exists($config_file)){
    echo "Database does not exist - create one from the example.\n";
    copy("database/knjsqladmin_example.sqlite3", $config_file);
  }

  $mydb = new knjdb();
  $mydb->setOpts(array(
      "type" => "pdo",
      "dbtype" => "sqlite3",
      "path" => $config_file
    )
  );

  echo("Loading settings and language.\n");
  require_once("knjphpframework/functions_knj_locales.php");
  knjlocales_setmodule("knjsqladmin", "locales", "ext", $language);

  require_once("knjphpframework/class_gtksettings_window.php");
  GtkSettingsWindow::setDBConn($mydb);

  require_once("knjphpframework/class_gtksettings_treeview.php");
  GtkSettingsTreeview::setDBConn($mydb);

  require_once("knjphpframework/class_gtksettings_paned.php");
  GtkSettingsPaned::setDBConn($mydb);

  require_once("knjphpframework/functions_options.php");
  opt_set(array("dbconn" => $mydb));


  //Check version of database.
  $version = opt_get("version");
  if ($version != _VERSION){
    if (msgbox(gtext("Question"), gtext("The database-version for knjSQLAdmin (profiles and settings) are not the same as the application-version. Do you want to delete your current database to replace it with a new version?"), "yesno") != "yes"){
      msgbox(gtext("Warning"), gtext("The application cant start with an old database."), "warning");
      exit();
    }

    $mydb->close();
    if (!unlink($config_file)){
      msgbox(gtext("Warning"), gtext("Could not remove the old database-file."), "warning");
    }else{
      msgbox(gtext("Information"), gtext("The database-file has been removed. Please restart the application to create a new one and start the application."), "info");
    }

    exit();
  }


  //parse skin in Windows, so it "blends in" with other programs.
  if ($knj_os == "windows"){
    ini_set("include_path", "./:./PEAR");
    Gtk::rc_parse("gtkrc");
  }


  //Print welcome-message.
  echo "knjSQLAdmin v. " . _VERSION . " - by Kasper Johansen <kaspernj@gmail.com> - www.kaspernj.org\n";


  //start the program and gtk-mainloop.
  $win_main = new WinMain();
  if ($dbconns){
    foreach($dbconns AS $dbconn){
      $win_main->SpawnNewDB($dbconn["title"], $dbconn["dbconn"]);
    }
  }
  if ($profiles){
    foreach($profiles AS $profile){
      $profile_data = $mydb->selectsingle("profiles", array("title" => $profile));
      if ($profile_data){
        require_once("gui/win_dbprofiles.php");
        $win_profiles = new WinDBProfiles($win_main);
        $win_profiles->openProfile($profile_data);
        $win_profiles->closeWindow();
      }else{
        msgbox(gtext("Warning"), sprintf(gtext("Could not find a profile by that name: %s."), $profile), "warning");
      }
    }
  }

  Gtk::main();
?>

